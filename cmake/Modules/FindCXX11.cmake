include(CheckCXXSourceCompiles)

macro(check_cxx11_features _flag _result)
    set(_saved_defs "${CMAKE_REQUIRED_DEFINITIONS}")
    set(CMAKE_REQUIRED_DEFINITIONS "${_flag}")
    check_cxx_source_compiles("#include <vector>
    auto main() -> int { std::vector<int> test_v{1,2,3,4}; for (auto a : test_v ) {} return 0; }"
    ${_result})
    set(CMAKE_REQUIRED_DEFINITIONS "${saved_defs}")
    unset(_saved_defs)
endmacro()

check_cxx11_features("" CXX11_SUPPORTED)
if(CXX11_SUPPORTED)
    set(CXX11_FLAG "")
    set(CXX11_FOUND TRUE)
else()
    check_cxx11_features("-std=gnu++11" CXX11_SUPPORTED_WITH_STD_GNUXX11)
    if(CXX11_SUPPORTED_WITH_STD_GNUXX11)
        set(CXX11_FLAG "-std=gnu++11")
        set(CXX11_FOUND TRUE)
    else()
        check_cxx11_features("-std=gnu++0x" CXX11_SUPPORTED_WITH_STD_GNUXX0X)
        if(CXX11_SUPPORTED_WITH_STD_GNUXX0X)
            set(CXX11_FLAG "-std=gnu++0x")
            set(CXX11_FOUND TRUE)
        else()
            check_cxx11_features("-std=c++11" CXX11_SUPPORTED_WITH_STD_CXX11)
            if(CXX11_SUPPORTED_WITH_STD_CXX11)
                set(CXX11_FLAG "-std=c++11")
                set(CXX11_FOUND TRUE)
            else()
                check_cxx11_features("-std=c++0x" CXX11_SUPPORTED_WITH_STD_CXX0X)
                if(CXX11_SUPPORTED_WITH_STD_CXX0X)
                    set(CXX11_FLAG "-std=c++0x")
                    set(CXX11_FOUND TRUE)
                endif()
            endif()
        endif()
    endif()
endif()

if(NOT CXX11_FOUND AND CXX11_FIND_REQUIRED)
    message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} does not support C++11")
endif()

if(CXX11_FLAG)
    message(STATUS "C++11 support is available with flag ${CXX11_FLAG}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX11_FLAG}")
endif()

